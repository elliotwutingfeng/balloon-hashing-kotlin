/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package balloon.hashing.kotlin

import java.util.HexFormat
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class BalloonHashingTest {
    @Test
    fun balloonReturnsCorrectHash() {
        val testVectors = arrayOf(
            mapOf(
                "password" to "hunter42",
                "salt" to "examplesalt",
                "spaceCost" to 1024,
                "timeCost" to 3,
                "output" to "716043dff777b44aa7b88dcbab12c078abecfac9d289c5b5195967aa63440dfb"
            ),
            mapOf(
                "password" to "",
                "salt" to "salt",
                "spaceCost" to 3,
                "timeCost" to 3,
                "output" to "5f02f8206f9cd212485c6bdf85527b698956701ad0852106f94b94ee94577378",
            ),
            mapOf(
                "password" to "password",
                "salt" to "",
                "spaceCost" to 3,
                "timeCost" to 3,
                "output" to "20aa99d7fe3f4df4bd98c655c5480ec98b143107a331fd491deda885c4d6a6cc",
            ),
            mapOf(
                "password" to "\u0000",
                "salt" to "\u0000",
                "spaceCost" to 3,
                "timeCost" to 3,
                "output" to "4fc7e302ffa29ae0eac31166cee7a552d1d71135f4e0da66486fb68a749b73a4",
            ),
            mapOf(
                "password" to "password",
                "salt" to "salt",
                "spaceCost" to 1,
                "timeCost" to 1,
                "output" to "eefda4a8a75b461fa389c1dcfaf3e9dfacbc26f81f22e6f280d15cc18c417545",
            ),
        )
        val bh = BalloonHashing(HashType.SHA256)
        assertFailsWith<IllegalStateException>(message = "Must have an even length", block = {
            bh.verify("0", "password", "salt", 1, 1)
        })
        for (testVector in testVectors) {
            val digest = bh.balloon(
                testVector["password"] as String,
                testVector["salt"] as String,
                testVector["spaceCost"] as Int,
                testVector["timeCost"] as Int
            )
            assertEquals(HexFormat.of().formatHex(digest), testVector["output"], "balloon should return correct hash")
            assertEquals(
                bh.balloonHash(testVector["password"] as String, testVector["salt"] as String),
                HexFormat.of()
                    .formatHex(bh.balloon(testVector["password"] as String, testVector["salt"] as String, 16, 20, 4))
            )
            assertTrue(
                bh.verify(
                    testVector["output"] as String,
                    testVector["password"] as String,
                    testVector["salt"] as String,
                    testVector["spaceCost"] as Int,
                    testVector["timeCost"] as Int
                )
            )
            assertFalse(
                bh.verify(
                    "0".repeat(64),
                    testVector["password"] as String,
                    testVector["salt"] as String,
                    testVector["spaceCost"] as Int,
                    testVector["timeCost"] as Int
                )
            )
        }
    }
}
